def check_postexploitation(perms_list):
    
    detected_postexp = {}
    perms_set = set(perms_list)  

    postexp_conditions = {
        "appengine": [
            (
                {
                    "appengine.memcache.addKey"
                },  "Add a key (only from web console)"
                
            ),
            (
                {
                    "appengine.memcache.flush"
                },  "Delete a key (only from web console)"
                
            ),
            (
                {
                    "logging.views.access"
                },  "See the logs of the App"
            ),
            (
                {
                    "appengine.memcache.list"
                },  "List keys (only from web console)"
            ),
            (
                {
                    "appengine.memcache.getKey"
                },  "Get a key (Only from web console)"
            )
        ],
        "cloudbuild": [
            (
                {
                    "cloudbuild.builds.approve"
                }, "Approve the execution of a codebuild that require approvals"
            )
        ],
        "cloudfunctions": [
            ({"cloudfunctions.functions.sourceCodeGet"}, "Get a signed URL to be able to download the source code of the Cloud Function"),
        ],
        "cloudsql": [
            ({"cloudsql.instances.update", "cloudsql.instances.get"}, "Allow your own IP address to access database"),
            ({"cloudsql.users.list"}, "Get a list of all the users of the database"),
            ({"cloudsql.users.create"}, "Create a new user inside the database"),
            ({"cloudsql.users.update"}, "Update user inside the database. For example, you could change its password"),
            ({"cloudsql.instances.restoreBackup", "cloudsql.backupRuns.get"}, "Restore a backup inside a database"),
            ({"cloudsql.backupRuns.delete"}, "Permission to delete backups"),
            ({"storage.objects.create", "cloudsql.instances.export"}, "Export a database to a Cloud Storage Bucket so you can access it from there"),
            ({"cloudsql.instances.import", "storage.objects.get"}, "Import a database (overwrite) from a Cloud Storage Bucket"),
            ({"cloudsql.databases.delete"}, "Permission to delete db instance"),
        ],
        "kms": [
            ({"cloudkms.cryptoKeyVersions.destroy"}, "Destroy a KMS version"),
        ],
        "logging": [
            ({"logging.logEntries.list"}, "Permission to read logs"),
            ({"logging.logs.delete"}, "Permission to delete logs"),
            ({"logging.logEntries.create"}, "Permission to write logs"),
            ({"logging.buckets.update"}, "Permission to update logging buckets"),
            ({"logging.buckets.delete"}, "Permission to delete logging buckets"),
            ({"logging.links.delete"}, "Permission to delete links"),
            ({"logging.views.delete"}, "Permission to delete a logging view to remove access to anyone using it"),
            ({"logging.views.update"}, "Update a logging view to hide data"),
            ({"logging.logMetrics.update"}, "Update log based metrics"),
            ({"logging.logMetrics.delete"}, "Delete log based metrics"),
            ({"logging.sinks.delete"}, "Delete sinks"),
            ({"logging.sinks.update"}, "Update/disable sinks"),
        ],
        "pubsub": [
            ({"pubsub.topics.publish"}, "Send unexpected data and trigger unexpected functionalities or exploit vulnerabilities"),
            ({"pubsub.topics.detachSubscription"}, "Useful to prevent a subscription from receiving messages, maybe to avoid detection"),
            ({"pubsub.topics.delete"}, "Useful to prevent a subscription from receiving messages, maybe to avoid detection."),
            ({"pubsub.topics.update"}, "Update some setting of the topic to disrupt it"),
            ({"pubsub.topics.setIamPolicy"}, "Give yourself permission to perform any of the PubSub Post Exploitation attack permissions"),
            ({"pubsub.subscriptions.create", "pubsub.topics.attachSubscription", "pubsub.subscriptions.consume"}, "Get all the messages in a web server"),
            ({"pubsub.subscriptions.delete"}, "Delete a subscription could be useful to disrupt a log processing system or something similar"),
            ({"pubsub.subscriptions.update"}, "Update some setting so messages are stored in a place you can access "),
            ({"pubsub.subscriptions.setIamPolicy"}, "Give yourself permission to perform any of the PubSub Post Exploitation attack permissions"),
            ({"pubsub.schemas.attach", "pubsub.topics.update", "pubsub.schemas.create"}, "Attach a schema to a topic so the messages doesn't fulfil it and therefore the topic is disrupted"),
            ({"pubsub.snapshots.create", "pubsub.snapshots.seek"}, "Create a snapshot of all the unACKed messages and put them back to the subscription"),
        ],
        "monitoring": [
            ({"monitoring.alertPolicies.delete"}, "Delete an alert policy"),
            ({"monitoring.alertPolicies.update"}, "Disrupt an alert policy"),
            ({"monitoring.dashboards.update"}, "Modify a dashboard to disrupt it"),
            ({"monitoring.dashboards.delete"}, "Delete a dashboard"),
            ({"monitoring.snoozes.create"}, "Prevent policies from generating alerts by creating a snoozer"),
            ({"monitoring.snoozes.update"}, "Update the timing of a snoozer to prevent alerts from being created when the attacker is interested"),
            ({"monitoring.notificationChannels.delete"}, "Delete a configured channel"),
            ({"monitoring.notificationChannels.update"}, "Update labels of a channel to disrupt it"),
        ],
        "secretmanager": [
            ({"secretmanager.versions.access"}, "Read the secrets from the secret manager"),
            ({"secretmanager.secrets.setIamPolicy"}, "Give yourself access to read the secrets from the secret manager"),
        ],
        "security": [
            ({"securitycenter.muteconfigs.create"}, "Prevent generation of findings that could detect an attacker by creating a muteconfig"),
            ({"securitycenter.muteconfigs.update"}, "Prevent generation of findings that could detect an attacker by updating a muteconfig"),
            ({"securitycenter.findings.bulkMuteUpdate"}, "Mute findings based on a filter"),
            ({"securitycenter.findings.setMute"}, "Mute findings based on source"),
            ({"securitycenter.findings.update"}, "Update a finding to indicate erroneous information"),
        ],
        "storage": [
            ({"storage.buckets.setIamPolicy"}, "Give youself additional bucket privileges"),
            ({"storage.buckets.update"}, "Disable public access prevention"),
        ],
    }

    postexp_links = {
        "appengine": "https://cloud.hacktricks.wiki/en/pentesting-cloud/gcp-security/gcp-post-exploitation/gcp-app-engine-post-exploitation.html",
        "cloudbuild":"https://cloud.hacktricks.wiki/en/pentesting-cloud/gcp-security/gcp-post-exploitation/gcp-cloud-build-post-exploitation.html",
        "cloudfunctions":"https://cloud.hacktricks.wiki/en/pentesting-cloud/gcp-security/gcp-post-exploitation/gcp-cloud-functions-post-exploitation.html",
        "cloudsql":"https://cloud.hacktricks.wiki/en/pentesting-cloud/gcp-security/gcp-post-exploitation/gcp-cloud-sql-post-exploitation.html",
        "kms":"https://cloud.hacktricks.wiki/en/pentesting-cloud/gcp-security/gcp-post-exploitation/gcp-kms-post-exploitation.html",
        "pubsub":"https://cloud.hacktricks.wiki/en/pentesting-cloud/gcp-security/gcp-post-exploitation/gcp-pub-sub-post-exploitation.html",
        "logging":"https://cloud.hacktricks.wiki/en/pentesting-cloud/gcp-security/gcp-post-exploitation/gcp-logging-post-exploitation.html",
        "monitoring":"https://cloud.hacktricks.wiki/en/pentesting-cloud/gcp-security/gcp-post-exploitation/gcp-monitoring-post-exploitation.html",
        "secretmanager":"https://cloud.hacktricks.wiki/en/pentesting-cloud/gcp-security/gcp-post-exploitation/gcp-secretmanager-post-exploitation.html",
        "security":"https://cloud.hacktricks.wiki/en/pentesting-cloud/gcp-security/gcp-post-exploitation/gcp-security-post-exploitation.html",
        "storage":"https://cloud.hacktricks.wiki/en/pentesting-cloud/gcp-security/gcp-post-exploitation/gcp-storage-post-exploitation.html",
      }

    for service, conditions in postexp_conditions.items():
        for required_perms, attack_name in conditions:
            if required_perms.issubset(perms_set):  
                detected_postexp[attack_name] = {
                    "permissions": list(required_perms),
                    "link": postexp_links.get(service)
                }

    return detected_postexp